#DB설정 DataBaseconfiguratin class에서 hikari DataSource를 설정하는 방식

########(jdbc:시작)##################
#spring.datasource.hikari.driver-class-name=oracle.jdbc.OracleDriver
#spring.datasource.hikari.jdbc-url=jdbc:oracle:thin:@127.0.0.1:1521:xe
########(jdbc: 끝)##################

########(log4jdbc : 시작)##############
spring.datasource.hikari.driver-class-name=net.sf.log4jdbc.sql.jdbcapi.DriverSpy
spring.datasource.hikari.jdbc-url=jdbc:log4jdbc:oracle:thin:@127.0.0.1:1521:xe
########(jdbc: 끝)##################
spring.datasource.hikari.username=board
spring.datasource.hikari.password=board
spring.datasource.hikari.connection-timeout=10000
spring.datasource.hikari.validation-timeout=10000
spring.datasource.hikari.idle-timeout=10000
spring.datasource.hikari.connection-test-query=SELECT 1 FROM DUAL
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.pool-name==springHikariCP


#DB설정(현재쓰는 방식): application.properties에서 바로 hikari DataSource를 설정하는 방식

#spring.datasource.type=com.zaxxer.hikari.HikariDataSource
########(jdbc:시작)##################
##spring.datasource.url=jdbc:oracle:thin:@127.0.0.1:1521:xe
##spring.datasource.driver-class-name=oracle.jdbc.OracleDriver
########(jdbc: 끝)##################

########(log4jdbc : 시작)##############
#spring.datasource.url=jdbc:log4jdbc:oracle:thin:@127.0.0.1:1521:xe
#spring.datasource.driver-class-name=net.sf.log4jdbc.sql.jdbcapi.DriverSpy
########(log4jdbc : 끝)##############
#spring.datasource.username=board
#spring.datasource.password=board
#spring.datasource.hikari.connection-timeout=10000
#spring.datasource.hikari.validation-timeout=10000
#spring.datasource.hikari.idle-timeout=10000
#spring.datasource.hikari.connection-test-query=SELECT 1 FROM DUAL



#port 설정
server.port=18080


# 카멜 표기법 - 스네이크 표기법 매핑 설정
mybatis.configuration.map-underscore-to-camel-case=true

spring.thymeleaf.suffix=.html
spring.thymeleaf.check-template-location=true
spring.thymeleaf.mode=HTML
spring.thymeleaf.cache=false




spring.web.resources.cache.period=0

#JPA 설정
spring.jpa.properties.hibernate.ddl-auto=create
#spring.jpa.properties.hibernate.ddl-auto=update

# JPA Query 로그 확인
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true

#사용할 DB 선택
spring.jpa.database=oracle
spring.jpa.database-platform=org.hibernate.dialect.Oracle10gDialect
#spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect

# JPA 엔티티 연관관계를 바탕으로 테이블 생성과 같은 스크립트를 자동으로 생성
spring.jpa.generate-ddl=true
spring.jpa.show-sql=true
#spring.jpa.properties.hibernate.show_sql=true

## SQL 로그 설명
logging.level.org.hibernate.type.descriptor.sql=trace

## 하이버네이트의 새로운 ID 생성 옵션의 사용 여부 설정
spring.jpa.hibernate.use-new-id-generator-mappings=false

##보안 로그 레벨 설정
logging.level.org.springframework.security=debug
#logging.level.org.springframework.boot.security=debug



